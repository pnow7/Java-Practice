package cs;

public class Q5 {
    /*
     * ArrayList와 LinkedList의 내부 동작 방식 차이 설명. 어떤 상황에서 더 유리한지.
     * 
     * ArrayList:
     * 내부적으로 배열✨을 사용하여 데이터 저장. 
     * 데이터가 메모리 상에 연속적으로 위치. ✨
     * 
     * 장점: 
     * 인덱스를 이용한 조회가 매우 빠름. (O(1)) ✨
     * 데이터가 연속적으로 있어 캐시 효율이 좋을 수 있음. ✨
     * 
     * 단점: 
     * 중간에 데이터 삽입 하거나 삭제 할 경우, 
     * 해당 위치 뒤의 모든 데이터를 이동 시켜야 하므로 성능이 느림. (O(n))
     *
     * ex) 
     * 조회✨가 빈번✨할때, 데이터의 삽입, 삭제가 주로 리스트의✨ 끝✨에서 일어날 경우 
     * => 단순히 데이터를 저장하고 읽을때 유리
     * 
     * ====> 결론
     * : 배열 기반, 검색 빠름, 삽입/삭제는 중간 위치에서 느림
     * --------------------------------------------------------------------
     *  
     * LinkedList:
     * 내부적으로 노드✨를 사용하여 데이터 저장. 
     * 각 노드는 데이터의 다음 노드의 참조 주소를 가지고 있고 
     * 메모리 상에 비연속적으로 위치 ✨
     * 
     *
     * 장점:
     * 각 노드의 앞뒤참조만 변경하면 되므로 성능이 빠름(O(1))
     * 크기 변경이 자유로움 ✨
     * 
     * 단점:
     * 특정 인덱스의 데이터를 조회하려면 처음 노드✨부터 순차적으로 탐색해야해서 느림.✨ (O(n))
     * 각 노드가 데이터 외에 참조 주소도✨ 저장✨해야 하므로 
     * 메모리 사용량이 ArrayList보다 클 수 있음.✨
     * 데이터가 비연속적으로 있어 캐시 효율성이 상대적으로 떨어질 수 있음.
     * 
     * ex)
     * 삽입/삭제✨가 리스트의 중간에서 빈번하게 일어날때
     * 
     * ====> 결론
     * : ✨노드 기반, 삽입/삭제가 빠름, 검색은 느림✨
     */
}
